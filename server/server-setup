#!/bin/sh -e

USER="gab"
HOSTNAME="archlinux"
DISK="/dev/vda"
MIRROR="Brazil" 
TIMEZONE="America/Sao_Paulo"
KEYMAP="br-abnt2"

checkEnv() {
    if [ ! -f /run/archiso/bootmnt/arch/x86_64/airootfs.sfs ]; then
        printf "%b\n" "ERROR: Archiso was not detected"
        exit 1
    fi

    if [ -d /sys/firmware/efi ]; then
        if [ "$(cat /sys/firmware/efi/fw_platform_size)" != "64" ]; then
            printf "%b\n" "ERROR: Only 64-bit UEFI systems are supported"
            exit 1
        fi
    else
        printf "%b\n" "ERROR: Only 64-bit UEFI systems are supported"
        exit 1
    fi

    if [ "$(id -u)" -ne 0 ]; then
        printf "%b\n" "ERROR: Root privileges needed"
        exit 1
    fi

    if [ -f /var/lib/pacman/db.lck ]; then
        if pgrep -x pacman >/dev/null 2>&1; then
            printf "%b\n" "ERROR: Pacman must be closed"
            exit 1
        else
            rm -f /var/lib/pacman/db.lck
        fi
    fi
}

setPasswd() {
    while :; do
        printf "\n%b " "Enter your password:"
        stty -echo
        read -r password
        stty echo

        printf "\n%b " "Verify your password:"
        stty -echo
        read -r verify
        stty echo

        if [ "$password" != "$verify" ]; then
            printf "\n%b\n" "Passwords do not match"
        elif [ "$password" = "$verify" ] && [ -n "$password" ]; then
            PASSWORD="$password"
            break
        else
            printf "\n%b\n" "Invalid password"
        fi  
    done
}

diskFormat() {
    umount -A --recursive /mnt || true
    sgdisk -Z "$DISK"
    sgdisk -a 2048 "$DISK"

    sgdisk -n 1::+1G -t=1:ef00 -c=1:"EFI" "$DISK"
    sgdisk -n 2::-0 -t=2:8300 -c=2:"ROOT" "$DISK"

    partprobe "$DISK"
}

diskMount() {
    case "$DISK" in
        *nvme*)
            P1="${DISK}p1"
            P2="${DISK}p2"
            ;;
        *)
            P1="${DISK}1"
            P2="${DISK}2"
            ;;
    esac

    mkfs.fat -F 32 -n "EFI" "$P1"
    mkfs.ext4 -F -L "ROOT" "$P2"

    mount "$P2" /mnt
    mount --mkdir "$P1" /mnt/boot
}

getMirrors() {
    printf "%b%s%b\n" "Fetching fastest mirrors for $MIRROR..."
    reflector --country $MIRROR --latest 5 --protocol https --save /etc/pacman.d/mirrorlist
}

baseSystem() {
    if [ "$(systemd-detect-virt)" = "none" ]; then
        pacstrap -K /mnt base linux-lts linux-firmware
    else
        pacstrap -K /mnt base linux-lts
    fi
}

setSystem() {
    genfstab -U /mnt >> /mnt/etc/fstab
    arch-chroot /mnt /bin/bash <<EOF

    printf "%b\n" "Setting timezone..."
    ln -sf /usr/share/zoneinfo/$TIMEZONE /etc/localtime
    hwclock --systohc

    printf "%b\n" "Setting locale..."
    sed -i 's/^#pt_BR.UTF-8 UTF-8/pt_BR.UTF-8 UTF-8/' /etc/locale.gen
    locale-gen
    printf "%b\n" "LANG=pt_BR.UTF-8" > /etc/locale.conf

    printf "%b\n" "Setting keymap..."
    printf "%b%s\n" "KEYMAP=" "$KEYMAP" > /etc/vconsole.conf

    printf "%b\n" "Setting hostname..."
    printf "%s\n" "$HOSTNAME" > /etc/hostname

    printf "%b\n" "Setting network manager..."
    pacman -S --noconfirm --needed networkmanager
    systemctl enable NetworkManager

    printf "%b\n" "Setting microcode..."
    if grep -q "GenuineIntel" /proc/cpuinfo; then
        pacman -S --noconfirm --needed intel-ucode
    elif grep -q "AuthenticAMD" /proc/cpuinfo; then
        pacman -S --noconfirm --needed amd-ucode
    else
        printf "%b\n" "Unable to detect CPU vendor. Skipping microcode installation..."
    fi

    printf "%b\n" "Setting user..."
    pacman -S --noconfirm --needed sudo
    useradd -m -G wheel -s /bin/bash $USER
    printf "%s:%s\n" "$USER" "$PASSWORD" | chpasswd
    sed -i 's/^# %wheel ALL=(ALL:ALL) NOPASSWD: ALL/%wheel ALL=(ALL:ALL) NOPASSWD: ALL/' /etc/sudoers

    printf "%b\n" "Setting grub..."
    pacman -S --noconfirm --needed grub efibootmgr
    grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB --removable
    grub-mkconfig -o /boot/grub/grub.cfg

EOF
}

checkEnv
clear
setfont ter-v18b
setPasswd
getMirrors
clear
diskFormat
diskMount
baseSystem
setSystem
clear

printf "%b\n" "Rebooting system in 5 seconds..."
sleep 1
printf "%b\n" "Rebooting system in 4 seconds..."
sleep 1
printf "%b\n" "Rebooting system in 3 seconds..."
sleep 1
printf "%b\n" "Rebooting system in 2 seconds..."
sleep 1
printf "%b\n" "Rebooting system in 1 second..."
sleep 1
systemctl reboot
