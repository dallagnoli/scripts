#!/bin/sh -e

RED="\033[0;31m"
GREEN="\033[0;32m"
BLUE="\033[0;34m"
YELLOW="\033[0;33m"
RC="\033[0m"

initScript() {
    if [ ! -f /run/archiso/bootmnt/arch/x86_64/airootfs.sfs ]; then
        printf "%b\n" "${RED}ERROR: Archiso was not detected${RC}"
        exit 1
    fi

    if [ ! -d /sys/firmware/efi ]; then
        printf "%b\n" "${RED}ERROR: Only UEFI 64-bit systems are supported${RC}"
        exit 1
    fi

    if [ "$(id -u)" -ne 0 ]; then
        printf "%b\n" "${RED}ERROR: Root privileges needed${RC}"
        exit 1
    fi

    if [ -f /var/lib/pacman/db.lck ]; then
        if pgrep -x pacman >/dev/null 2>&1; then
            printf "%b\n" "${RED}ERROR: Pacman must be closed${RC}"
            exit 1
        else
            rm -f /var/lib/pacman/db.lck
        fi
    fi

    printf "%b\n" "${GREEN}Getting pacman ready...${RC}"    
    pacman-key --init >/dev/null 2>&1
    pacman-key --populate archlinux >/dev/null 2>&1
    pacman -Sy --noconfirm --needed archlinux-keyring >/dev/null 2>&1 || {
        printf "%b\n" "${RED}ERROR: Keyring update failed${RC}" >&2
        exit 1
    }

    if ! command -v fzf >/dev/null 2>&1; then
        printf "%b\n" "${GREEN}Installing fuzzy finder...${RC}"
        pacman -S --noconfirm --needed fzf >/dev/null 2>&1 || {
            printf "%b\n" "${RED}ERROR: Fzf install failed${RC}" >&2
            exit 1
        }
    fi

    clear
    setfont ter-v18b
}

userInfo() {
    while :; do
        printf "\n%b " "${BLUE}Enter your username:${RC}"
        read -r username
        username=$(printf "%s" "${username}" | xargs | tr "[:upper:]" "[:lower:]")
        if [ "${username}" != "root" ] && printf "%s" "${username}" | grep -Eq "^[a-z][-a-z0-9_]*\$"; then
            USER="${username}"
            break
        else
            printf "%b\n" "${YELLOW}WARNING:${RC} Invalid username"
        fi
    done

    while :; do
        printf "\n%b " "${BLUE}Enter your password:${RC}"
        stty -echo
        read -r password
        stty echo

        printf "\n%b " "${BLUE}Verify your password:${RC}"
        stty -echo
        read -r verify
        stty echo

        if [ "${password}" != "${verify}" ]; then
            printf "\n%b\n" "${YELLOW}WARNING:${RC} Passwords do not match"
        elif [ "${password}" = "${verify}" ] && [ -n "${password}" ]; then
            PASSWD="${password}"
            break
        else
            printf "\n%b\n" "${YELLOW}WARNING:${RC} Invalid password"
        fi  
    done

    while :; do
        printf "\n\n%b " "${BLUE}Name your machine:${RC}"
        read -r hostname
        hostname=$(printf "%s" "${hostname}" | xargs | tr "[:upper:]" "[:lower:]")
        if printf "%s" "${hostname}" | grep -Eq "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])$"; then
            HOST="${hostname}"
            break
        else
            printf "%b" "${YELLOW}WARNING:${RC} Invalid hostname"
        fi
    done
}

fuzzySelection() {
    printf "%b\n" "${options}" | fzf --prompt "${prompt}"
}

diskSelection() {
    options=$(lsblk -dn -o NAME,SIZE,TYPE,TRAN | awk '$3 == "disk" && $4 != "usb" && $1 !~ /^(loop|ram|sr|fd)/ {printf "/dev/%s (%s)\n", $1, $2}')
    prompt="Select a disk: "
    selected=$(fuzzySelection)
    DISK=$(printf "%s" "${selected}" | tr -s ' ' | cut -d' ' -f1)
}

regionSelection() {
    options=$(curl -fs http://bin.christitus.com/raw/dalopenori)
    prompt="Select a mirror: "
    COUNTRY=$(fuzzySelection)

    options=$(awk '/^[^#]/ { print $3 }' /usr/share/zoneinfo/zone.tab)
    prompt="Select a timezone: "
    TIMEZONE=$(fuzzySelection)

    options=$(localectl list-keymaps)
    prompt="Select a layout: "
    KEYMAP=$(fuzzySelection)

    printf "\n%b%s%b\n" "${GREEN}INFO:${RC} " "Fetching fastest mirrors for ${COUNTRY}..."
    reflector --country "${COUNTRY}" --latest 5 --protocol https --save /etc/pacman.d/mirrorlist >/dev/null 2>&1
}

initScript
userInfo
diskSelection
regionSelection
clear

# --------------------------------------
# --- Erase Disk / Create Partitions ---
# --------------------------------------

umount -A -R /mnt || true
sgdisk -Z "${DISK}"
sgdisk -a 2048 "${DISK}"

sgdisk -n 1::+1G -t=1:ef00 -c=1:"EFI" "${DISK}"
sgdisk -n 2::-0 -t=2:8300 -c=2:"ROOT" "${DISK}"

partprobe "${DISK}"

# -----------------------------------------
# --- Format Partitions / Mount to /mnt ---
# -----------------------------------------

case "${DISK}" in
    *nvme*)
        P1="${DISK}p1"
        P2="${DISK}p2"
        ;;
    *)
        P1="${DISK}1"
        P2="${DISK}2"
        ;;
esac

mkfs.fat -F 32 -n "EFI" "${P1}"
mkfs.ext4 -F -L "ROOT" "${P2}"

mount "${P2}" /mnt
mount --mkdir "${P1}" /mnt/boot

# ----------------------------------------------------------------------
# --- Install Base System / Generate Fstab / Chroot Installed System ---
# ----------------------------------------------------------------------

if [ -n "${UCODE}" ] && [ "${VM}" = "n" ]; then
    pacstrap -K /mnt base base-devel git linux-lts linux-firmware "${UCODE}" networkmanager 
elif [ -n "${UCODE}" ] && [ "${VM}" = "y" ]; then
    pacstrap -K /mnt base base-devel git linux-lts "${UCODE}" networkmanager 
elif [ ! -n "${UCODE}" ] && [ "${VM}" = "n" ]; then
    pacstrap -K /mnt base base-devel git linux-lts linux-firmware networkmanager 
else
    pacstrap -K /mnt base base-devel git linux-lts networkmanager
fi

genfstab -U /mnt >> /mnt/etc/fstab
arch-chroot /mnt /bin/bash <<EOF

# --------------------------------------------
# --- Enable Multilib / Color / ILoveCandy ---
# --------------------------------------------

sed -i 's/^#Color/Color\nILoveCandy/' /etc/pacman.conf
sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf
pacman -Sy --noconfirm --needed

# --------------------------------------
# --- Set Locale / Timezone / Keymap ---
# --------------------------------------

sed -i "s/^#${LOCALE_LONG}/${LOCALE_LONG}/" /etc/locale.gen
locale-gen
printf "LANG=%s\n" "${LOCALE}" > /etc/locale.conf

ln -sf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime
hwclock --systohc

printf "KEYMAP=%s\n" "${KEYMAP}" > /etc/vconsole.conf

if [ "${KEYMAP}" = "br-abnt2" ]; then
    mkdir -p /etc/X11/xorg.conf.d
    printf 'Section "InputClass"\n\tIdentifier "system-keyboard"\n\tMatchIsKeyboard "on"\n\tOption "XkbLayout" "br"\n\tOption "XkbModel" "abnt2"\nEndSection\n' > /etc/X11/xorg.conf.d/00-keyboard.conf
fi

# ---------------------------------------------
# --- Create User / Set Sudo / Set Hostname ---
# ---------------------------------------------

useradd -m -G wheel -s /bin/bash "${USER}"
printf "%s:%s\n" "${USER}" "${PASSWD}" | chpasswd
printf "%s\n" "${HOST}" > /etc/hostname
sed -i 's/^# *%wheel ALL=(ALL:ALL) NOPASSWD: ALL/%wheel ALL=(ALL:ALL) NOPASSWD: ALL/' /etc/sudoers

# --------------------------------
# --- Install Yay / AUR Helper ---
# --------------------------------

su - "${USER}" -c "cd /tmp && rm -rf yay-bin && git clone https://aur.archlinux.org/yay-bin.git && cd yay-bin && makepkg --noconfirm -si"

# -----------------------------
# --- Enable NetworkManager ---
# -----------------------------

systemctl enable NetworkManager.service

# -------------------------------------
# --- Set Systemd-Boot / Bootloader ---
# -------------------------------------

bootctl install
printf "default @saved\ntimeout 0\nconsole-mode max\neditor no\n" > /boot/loader/loader.conf

if [ -n "${UCODE}" ]; then
    printf "title Arch Linux (LTS)\nlinux /vmlinuz-linux-lts\ninitrd /%s.img\ninitrd /initramfs-linux-lts.img\noptions root=UUID=%s rw\n" "${UCODE}" "${ROOT_UUID}" > /boot/loader/entries/lts.conf
else
    printf "title Arch Linux (LTS)\nlinux /vmlinuz-linux-lts\ninitrd /initramfs-linux-lts.img\noptions root=UUID=%s rw\n" "${ROOT_UUID}" > /boot/loader/entries/lts.conf
fi
EOF

# -------------------------------------------
# --- Finish Installation / Reboot System ---
# -------------------------------------------

printf "%b\n" "${GREEN}Rebooting system in 5 seconds...${RC}"
sleep 1
printf "%b\n" "${GREEN}Rebooting system in 4 seconds...${RC}"
sleep 1
printf "%b\n" "${GREEN}Rebooting system in 3 seconds...${RC}"
sleep 1
printf "%b\n" "${GREEN}Rebooting system in 2 seconds...${RC}"
sleep 1
printf "%b\n" "${GREEN}Rebooting system in 1 second...${RC}"
sleep 1
systemctl reboot
